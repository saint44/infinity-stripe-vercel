name: Fix Stripe/Vercel and Redeploy
on:
  workflow_dispatch: {}   # Run manually from the Actions tab

jobs:
  fix:
    runs-on: ubuntu-latest
    permissions:
      contents: write     # allow committing with GITHUB_TOKEN
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Ensure /api exists
        run: mkdir -p api

      - name: Move backend files into /api if they exist
        run: |
          [ -f config.js ] && git mv -f config.js api/config.js || true
          [ -f create-payment-intent.js ] && git mv -f create-payment-intent.js api/create-payment-intent.js || true
          [ -f webhook.js ] && git mv -f webhook.js api/webhook.js || true

      - name: Create /api/config.js if missing
        run: |
          if [ ! -f api/config.js ]; then
            cat > api/config.js <<'EOF'
// /api/config.js
export default function handler(req, res) {
  const key = process.env.NEXT_PUBLIC_STRIPE_PUBLISHABLE_KEY;
  if (!key) return res.status(500).json({ error: "Publishable key not set" });
  res.status(200).json({ publishableKey: key });
}
EOF
          fi

      - name: Create /api/create-payment-intent.js if missing
        run: |
          if [ ! -f api/create-payment-intent.js ]; then
            cat > api/create-payment-intent.js <<'EOF'
import Stripe from "stripe";
const stripe = new Stripe(process.env.STRIPE_SECRET_KEY, { apiVersion: "2023-10-16" });

export default async function handler(req, res) {
  if (req.method !== "POST") return res.status(405).json({ error: "Method not allowed" });
  try {
    const { amount, currency = "usd", customer_email, metadata } = req.body || {};
    if (!amount) return res.status(400).json({ error: "amount required (in cents)" });
    const pi = await stripe.paymentIntents.create({
      amount, currency, receipt_email: customer_email, metadata: metadata || {},
      automatic_payment_methods: { enabled: true }
    });
    res.json({ clientSecret: pi.client_secret, id: pi.id });
  } catch (e) {
    console.error(e);
    res.status(500).json({ error: e.message });
  }
}
EOF
          fi

      - name: Create /api/webhook.js if missing
        run: |
          if [ ! -f api/webhook.js ]; then
            cat > api/webhook.js <<'EOF'
import Stripe from "stripe";
export const config = { api: { bodyParser: false } };

function buffer(stream) {
  return new Promise((resolve, reject) => {
    const chunks = [];
    stream.on("data", (c) => chunks.push(Buffer.from(c)));
    stream.on("end", () => resolve(Buffer.concat(chunks)));
    stream.on("error", reject);
  });
}

export default async function handler(req, res) {
  if (req.method !== "POST") return res.status(405).end("Method Not Allowed");
  const stripe = new Stripe(process.env.STRIPE_SECRET_KEY, { apiVersion: "2023-10-16" });
  const sig = req.headers["stripe-signature"];
  const secret = process.env.STRIPE_WEBHOOK_SECRET || "";
  try {
    const buf = await buffer(req);
    const event = stripe.webhooks.constructEvent(buf, sig, secret);
    if (event.type === "payment_intent.succeeded") {
      console.log("✅ Payment succeeded:", event.data.object.id);
    }
    return res.json({ received: true });
  } catch (e) {
    console.error("Webhook error:", e.message);
    return res.status(400).send(`Webhook Error: ${e.message}`);
  }
}
EOF
          fi

      - name: Patch index.html to use /api/config and /api/create-payment-intent
        shell: bash
        run: |
          cat > index.html <<'EOF'
<!doctype html>
<html>
  <head>
    <meta charset="utf-8"/>
    <title>Infinity Labs — Test Checkout</title>
    <meta name="viewport" content="width=device-width, initial-scale=1"/>
    <script src="https://js.stripe.com/v3/"></script>
    <style>
      body{font-family:system-ui,Arial;margin:2rem}
      input,button{padding:.6rem;margin:.3rem 0;width:320px;max-width:100%}
      #card{max-width:340px;margin:.5rem 0}
    </style>
  </head>
  <body>
    <h2>Infinity Labs — Test Checkout</h2>
    <label>Amount (in cents)<br/><input id="amount" value="1999"/></label><br/>
    <label>Currency<br/><input id="currency" value="usd"/></label><br/>
    <label>Customer email (optional)<br/><input id="email" placeholder="you@example.com"/></label><br/>
    <div id="card"></div>
    <button id="pay">Pay</button>
    <p id="msg"></p>

    <script>
      const msg = (t) => (document.getElementById('msg').textContent = t || '');

      async function getStripe() {
        const res = await fetch('/api/config');
        if (!res.ok) throw new Error('Publishable key not set');
        const { publishableKey } = await res.json();
        return Stripe(publishableKey);
      }

      async function createPI(amount, currency, email) {
        const res = await fetch('/api/create-payment-intent', {
          method: 'POST',
          headers: { 'Content-Type': 'application/json' },
          body: JSON.stringify({ amount: Number(amount), currency, customer_email: email })
        });
        if (!res.ok) throw new Error('Failed to create PaymentIntent');
        return res.json();
      }

      let card; // will hold the card element

      (async () => {
        try {
          const stripe = await getStripe();
          const elements = stripe.elements();
          card = elements.create('card');
          card.mount('#card');
        } catch (e) { msg('❌ ' + e.message); }
      })();

      document.getElementById('pay').addEventListener('click', async () => {
        try {
          msg('Starting…');
          const amount = document.getElementById('amount').value;
          const currency = document.getElementById('currency').value;
          const email = document.getElementById('email').value;
          const stripe = await getStripe();
          const { clientSecret } = await createPI(amount, currency, email);
          const { error } = await stripe.confirmCardPayment(clientSecret, {
            payment_method: { card, billing_details: { email: email || undefined } }
          });
          if (error) msg('❌ ' + error.message);
          else msg('✅ Payment confirmed!');
        } catch (e) { msg('❌ ' + e.message); }
      });
    </script>
  </body>
</html>
EOF

      - name: Commit & push if changed
        run: |
          if ! git diff --quiet || ! git diff --cached --quiet; then
            git config user.name "repo-agent"
            git config user.email "repo-agent@users.noreply.github.com"
            git add -A
            git commit -m "Agent: ensure /api endpoints + Stripe frontend; trigger redeploy"
            git push
          else
            echo "No changes to commit"
          fi
